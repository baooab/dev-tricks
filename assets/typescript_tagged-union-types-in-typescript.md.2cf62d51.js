import{o as n,c as s,a}from"./app.808b26de.js";const p='{"title":"","description":"","frontmatter":{},"headers":[{"level":2,"title":"使用标记联合类型构建支付方法","slug":"使用标记联合类型构建支付方法"},{"level":2,"title":"使用标记联合类型构建 Redux Action","slug":"使用标记联合类型构建-redux-action"}],"relativePath":"typescript/tagged-union-types-in-typescript.md","lastUpdated":1642335454151}',e={},t=a('<h1 id="typescript-中的标记联合类型"><a class="header-anchor" href="#typescript-中的标记联合类型" aria-hidden="true">#</a> TypeScript 中的标记联合类型</h1><blockquote><p>Marius Schulz, <a href="https://mariusschulz.com/blog/tagged-union-types-in-typescript" target="_blank" rel="noopener noreferrer">“Tagged Union Types in TypeScript”</a>, November 3, 2016</p></blockquote><p>TypeScript 2.0 中实现了一个相当有用的特性：<em>标记联合类型</em>，这个特性在其他语言中还称为 <em>总类型（sum types）</em> 或 <em>区别联合类型（discriminated union types）</em>。标记联合类型是一个联合类型，其成员类型里有一个区分属性（discriminant property）使用字面量类型来定义。</p><p>上述的定义有些抽象，接下来我们看两个例子说明下标记联合类型的使用场景。</p><h2 id="使用标记联合类型构建支付方法"><a class="header-anchor" href="#使用标记联合类型构建支付方法" aria-hidden="true">#</a> 使用标记联合类型构建支付方法</h2><p>假设我们要构建下述可供用户选择的支付方式：</p><ul><li><strong>现金（Cash）</strong> 不需要额外的其他信息</li><li><strong>PayPal</strong> 需要提供一个邮件地址</li><li><strong>信用卡（Credit card）</strong> 需要提供卡号和安全码</li></ul><p>针对每一种支付方式，我们创建一个 TypeScript 接口：</p><div class="language-ts line-numbers-mode"><pre><code><span class="token keyword">interface</span> <span class="token class-name">Cash</span> <span class="token punctuation">{</span>\n  kind<span class="token operator">:</span> <span class="token string">&quot;cash&quot;</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">interface</span> <span class="token class-name">PayPal</span> <span class="token punctuation">{</span>\n  kind<span class="token operator">:</span> <span class="token string">&quot;paypal&quot;</span><span class="token punctuation">;</span>\n  email<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">interface</span> <span class="token class-name">CreditCard</span> <span class="token punctuation">{</span>\n  kind<span class="token operator">:</span> <span class="token string">&quot;credit&quot;</span><span class="token punctuation">;</span>\n  cardNumber<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n  securityCode<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p>注意，除了必要的一些信息，每个类型都有一个 <code>kind</code> 属性，即所谓的 <em>区别属性</em>。这是一个 <a href="./string-literal-types-in-typescript.html">字符串字面量</a>（后续就会学到）。</p><p>我们还定义了一个 <code>PaymentMethod</code> 类型，它是由上述三种类型组合而成的联合类型，表示所支持的支付方式是三个 <em>组合类型（constituent types）</em> 中任一个：</p><div class="language-ts line-numbers-mode"><pre><code><span class="token keyword">type</span> <span class="token class-name">PaymentMethod</span> <span class="token operator">=</span> Cash <span class="token operator">|</span> PayPal <span class="token operator">|</span> CreditCard<span class="token punctuation">;</span>\n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br></div></div><p>现在有了支付类型，我们再创建一个接收此类型的函数，它返回一段可供人阅读的支付描述：</p><div class="language-ts line-numbers-mode"><pre><code><span class="token keyword">function</span> <span class="token function">describePaymentMethod</span><span class="token punctuation">(</span>method<span class="token operator">:</span> PaymentMethod<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">switch</span> <span class="token punctuation">(</span>method<span class="token punctuation">.</span>kind<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">case</span> <span class="token string">&quot;cash&quot;</span><span class="token operator">:</span>\n      <span class="token comment">// Here, method has type Cash</span>\n      <span class="token keyword">return</span> <span class="token string">&quot;Cash&quot;</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">case</span> <span class="token string">&quot;paypal&quot;</span><span class="token operator">:</span>\n      <span class="token comment">// Here, method has type PayPal</span>\n      <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">PayPal (</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>method<span class="token punctuation">.</span>email<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">)</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>\n\n    <span class="token keyword">case</span> <span class="token string">&quot;credit&quot;</span><span class="token operator">:</span>\n      <span class="token comment">// Here, method has type CreditCard</span>\n      <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Credit card (</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>method<span class="token punctuation">.</span>cardNumber<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">)</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><p>首先，这个函数用到的类型注解非常少——就一个参数 <code>method</code> 用到了类型注解！除此之外，整个函数体都是纯 ES2015 代码。</p><p>在 <code>switch</code> 语句内部的每个“case”中，TypeScript 编译器都会将联合类型的范围缩小至某个具体的成员类型。以 <code>&quot;paypal&quot;</code> 为例，<code>method</code> 参数的类型从 <code>PaymentMethod</code> 缩小至 <code>PayPal</code>。因此，在无需添加额外类型断言（type assertion）的情况下，我们能访问 <code>email</code> 属性。</p><p>在底层，编译器会跟踪程序控制流来缩小标签联合类型的范围。除了 <code>switch</code> 语句，编译器还能处理条件语句以及赋值和 <code>return</code> 语句：</p><div class="language-ts line-numbers-mode"><pre><code><span class="token keyword">function</span> <span class="token function">describePaymentMethod</span><span class="token punctuation">(</span>method<span class="token operator">:</span> PaymentMethod<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>method<span class="token punctuation">.</span>kind <span class="token operator">===</span> <span class="token string">&quot;cash&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// Here, method has type Cash</span>\n    <span class="token keyword">return</span> <span class="token string">&quot;Cash&quot;</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token comment">// Here, method has type PayPal | CreditCard</span>\n\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>method<span class="token punctuation">.</span>kind <span class="token operator">===</span> <span class="token string">&quot;paypal&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// Here, method has type PayPal</span>\n    <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">PayPal (</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>method<span class="token punctuation">.</span>email<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">)</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token comment">// Here, method has type CreditCard</span>\n  <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Credit card (</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>method<span class="token punctuation">.</span>cardNumber<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">)</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><p>这种程度的 <a href="./control-flow-based-type-analysis-in-typescript.html">控制流分析</a> 使得使用标签联合类型更加顺畅。使用最少的 TypeScript 语法，仍能享受到类型检查和代码补全的好处。嗯，的确是一场非常愉悦的编码体验。</p><h2 id="使用标记联合类型构建-redux-action"><a class="header-anchor" href="#使用标记联合类型构建-redux-action" aria-hidden="true">#</a> 使用标记联合类型构建 Redux Action</h2><p>标签联合类型的另一个用例就是在你的 TypeScript 项目用到 Redux 的时候。再来看另一个快速示例：包含一个 model、两个 action 和一个 reducer，是一个待办程序（相信你已经猜到了）。</p><p>我们用一个简单的 <code>Todo</code> 类型表示一个待办项。注意，这里使用了 <a href="./read-only-properties-in-typescript.html"><code>readonly</code> 修饰符</a> 告诉 TypeScript 编译器属性是不可修改的：</p><div class="language-ts line-numbers-mode"><pre><code><span class="token keyword">interface</span> <span class="token class-name">Todo</span> <span class="token punctuation">{</span>\n  <span class="token keyword">readonly</span> text<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n  <span class="token keyword">readonly</span> done<span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>用户可以添加新的待办项或者调整已存在待办项的完成状态。为了满足这个需求，我们需要两个 Redux Action。可以这样定义类型：</p><div class="language-ts line-numbers-mode"><pre><code><span class="token keyword">interface</span> <span class="token class-name">AddTodo</span> <span class="token punctuation">{</span>\n  <span class="token keyword">type</span><span class="token operator">:</span> <span class="token string">&quot;ADD_TODO&quot;</span><span class="token punctuation">;</span>\n  text<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">interface</span> <span class="token class-name">ToggleTodo</span> <span class="token punctuation">{</span>\n  <span class="token keyword">type</span><span class="token operator">:</span> <span class="token string">&quot;TOGGLE_TODO&quot;</span><span class="token punctuation">;</span>\n  index<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>就跟在之前的例子中展示的那样，Redux Action 类型应该包含应用所支持的所有 Action 集合：</p><div class="language-ts line-numbers-mode"><pre><code><span class="token keyword">type</span> <span class="token class-name">ReduxAction</span> <span class="token operator">=</span> AddTodo <span class="token operator">|</span> ToggleTodo<span class="token punctuation">;</span>\n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br></div></div><p>在这个用例中，<code>type</code> 属性作为区别属性存在，遵循 Redux 的命名约定。现在，我们再来添加一个 reducer 操作这些 Action：</p><div class="language-ts line-numbers-mode"><pre><code><span class="token keyword">function</span> <span class="token function">todosReducer</span><span class="token punctuation">(</span>\n  state<span class="token operator">:</span> ReadonlyArray<span class="token operator">&lt;</span>Todo<span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n  action<span class="token operator">:</span> ReduxAction\n<span class="token punctuation">)</span><span class="token operator">:</span> ReadonlyArray<span class="token operator">&lt;</span>Todo<span class="token operator">&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">switch</span> <span class="token punctuation">(</span>action<span class="token punctuation">.</span><span class="token keyword">type</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">case</span> <span class="token string">&quot;ADD_TODO&quot;</span><span class="token operator">:</span>\n      <span class="token comment">// action has type AddTodo here</span>\n      <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token operator">...</span>state<span class="token punctuation">,</span> <span class="token punctuation">{</span> text<span class="token operator">:</span> action<span class="token punctuation">.</span>text<span class="token punctuation">,</span> done<span class="token operator">:</span> <span class="token boolean">false</span> <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">case</span> <span class="token string">&quot;TOGGLE_TODO&quot;</span><span class="token operator">:</span>\n      <span class="token comment">// action has type ToggleTodo here</span>\n      <span class="token keyword">return</span> state<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>todo<span class="token punctuation">,</span> index<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">!==</span> action<span class="token punctuation">.</span>index<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          <span class="token keyword">return</span> todo<span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n\n        <span class="token keyword">return</span> <span class="token punctuation">{</span>\n          text<span class="token operator">:</span> todo<span class="token punctuation">.</span>text<span class="token punctuation">,</span>\n          done<span class="token operator">:</span> <span class="token operator">!</span>todo<span class="token punctuation">.</span>done\n        <span class="token punctuation">}</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">default</span><span class="token operator">:</span>\n      <span class="token keyword">return</span> state<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br></div></div><p>同样，只有函数签名包含类型注释，剩下的都是普通的 ES2015 代码。</p><p>我们遵循与前面示例相同的逻辑。基于 Redux Action 的 <code>type</code> 属性，我们在不修改已有状态的情况下，计算出新状态。在 <code>switch</code> 语句的 <code>case</code> 中，在不借助任何类型断言的情况下就能访问特定 Action 下的 <code>text</code> 或 <code>index</code> 属性。</p><p>本篇文章是 <a href="https://mariusschulz.com/blog/series/typescript-evolution" target="_blank" rel="noopener noreferrer">TypeScript Evolution</a> 系列中的一篇。</p>',32);e.render=function(a,p,e,o,c,l){return n(),s("div",null,[t])};export default e;export{p as __pageData};
