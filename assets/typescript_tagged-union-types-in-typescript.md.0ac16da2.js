import{o as e,c as t,a as n}from"./app.808b26de.js";const o='{"title":"","description":"","frontmatter":{},"headers":[{"level":2,"title":"[#](#modeling-payment-methods-with-tagged-union-types)Modeling Payment Methods with Tagged Union Types","slug":"modeling-payment-methods-with-tagged-union-types"},{"level":2,"title":"[#](#modeling-redux-actions-with-tagged-union-types)Modeling Redux Actions with Tagged Union Types","slug":"modeling-redux-actions-with-tagged-union-types"}],"relativePath":"typescript/tagged-union-types-in-typescript.md","lastUpdated":1640926977288}',a={},i=n('<h1 id="tagged-union-types-in-typescript"><a class="header-anchor" href="#tagged-union-types-in-typescript" aria-hidden="true">#</a> Tagged Union Types in TypeScript</h1><blockquote><p>Marius Schulz, <a href="https://mariusschulz.com/blog/tagged-union-types-in-typescript" target="_blank" rel="noopener noreferrer">“Tagged Union Types in TypeScript”</a>, November 3, 2016</p></blockquote><p>TypeScript 2.0 implements a rather useful feature: <em>tagged union types</em>, which you might know as <em>sum types</em> or <em>discriminated union types</em> from other programming languages. A tagged union type is a union type whose member types all define a discriminant property of a literal type.</p><p>Because the above definition is rather theoretical, we&#39;re going to be looking at two examples that illustrate how tagged union types would be used in practice.</p><h2 id="modeling-payment-methods-with-tagged-union-types"><a class="header-anchor" href="#modeling-payment-methods-with-tagged-union-types" aria-hidden="true">#</a> <a href="#modeling-payment-methods-with-tagged-union-types">#</a>Modeling Payment Methods with Tagged Union Types</h2><p>Let&#39;s say we want to model the following payment methods that users of a system can choose from:</p><ul><li><strong>Cash</strong> without further information,</li><li><strong>PayPal</strong> with a given email address, or</li><li><strong>Credit card</strong> with a given card number and security code.</li></ul><p>For each of these payment methods, we can create a TypeScript interface:</p><pre><code>interface Cash {\n  kind: &quot;cash&quot;;\n}\n\ninterface PayPal {\n  kind: &quot;paypal&quot;;\n  email: string;\n}\n\ninterface CreditCard {\n  kind: &quot;credit&quot;;\n  cardNumber: string;\n  securityCode: string;\n}\n</code></pre><p>Note that, in addition to the required information, each type has a <code>kind</code> property — the so-called <em>discriminant property</em>. It&#39;s of a <a href="/blog/string-literal-types-in-typescript.html">string literal type</a> in each case here. We&#39;ll look at the discriminant property in a minute.</p><p>Let&#39;s now also define a <code>PaymentMethod</code> type that is the union of the three types we just defined. This way, we&#39;re stating that every payment method must have exactly one of the three given <em>constituent types</em>:</p><pre><code>type PaymentMethod = Cash | PayPal | CreditCard;\n</code></pre><p>Now that our types are in place, let&#39;s write a function that accepts a payment method and returns a human-readable description of it:</p><pre><code>function describePaymentMethod(method: PaymentMethod) {\n  switch (method.kind) {\n    case &quot;cash&quot;:\n      // Here, method has type Cash\n      return &quot;Cash&quot;;\n\n    case &quot;paypal&quot;:\n      // Here, method has type PayPal\n      return `PayPal (${method.email})`;\n\n    case &quot;credit&quot;:\n      // Here, method has type CreditCard\n      return `Credit card (${method.cardNumber})`;\n  }\n}\n</code></pre><p>First of all, notice how few type annotations the function contains — just a single one for its <code>method</code> parameter! Besides that, the body of the function is pure ES2015 code.</p><p>Within each case of the <code>switch</code> statement, the TypeScript compiler narrows the union type to one of its member types. For instance, within the <code>&quot;paypal&quot;</code> case, the type of the <code>method</code> parameter is narrowed from <code>PaymentMethod</code> to <code>PayPal</code>. Therefore, we can access the <code>email</code> property without having to add a type assertion.</p><p>In essence, the compiler tracks the program control flow to narrow the tagged union types. Other than <code>switch</code> statements, it understands conditions as well as the effects of assignments and returns:</p><pre><code>function describePaymentMethod(method: PaymentMethod) {\n  if (method.kind === &quot;cash&quot;) {\n    // Here, method has type Cash\n    return &quot;Cash&quot;;\n  }\n\n  // Here, method has type PayPal | CreditCard\n\n  if (method.kind === &quot;paypal&quot;) {\n    // Here, method has type PayPal\n    return `PayPal (${method.email})`;\n  }\n\n  // Here, method has type CreditCard\n  return `Credit card (${method.cardNumber})`;\n}\n</code></pre><p>This degree of <a href="/blog/control-flow-based-type-analysis-in-typescript.html">control flow analysis</a> makes working with tagged union types smooth. With minimal TypeScript syntax overhead, you can write almost plain JavaScript and still benefit from type checking and code completion. A pleasant editing experience, indeed!</p><h2 id="modeling-redux-actions-with-tagged-union-types"><a class="header-anchor" href="#modeling-redux-actions-with-tagged-union-types" aria-hidden="true">#</a> <a href="#modeling-redux-actions-with-tagged-union-types">#</a>Modeling Redux Actions with Tagged Union Types</h2><p>Another use case where tagged union types shine is when you&#39;re using Redux in your TypeScript applications. Let&#39;s construct another quick example, consisting of a model, two actions, and a reducer for — you guessed it — a todo application.</p><p>Here&#39;s a simplified <code>Todo</code> type that represents a single todo. Note how we&#39;re using the <a href="/blog/read-only-properties-in-typescript.html"><code>readonly</code> modifier</a> to have the TypeScript compiler check for unintended property mutation:</p><pre><code>interface Todo {\n  readonly text: string;\n  readonly done: boolean;\n}\n</code></pre><p>Users can add new todos and toggle the completion status of existing ones. For these requirements, we&#39;re going to need two Redux actions, which we can type as follows:</p><pre><code>interface AddTodo {\n  type: &quot;ADD_TODO&quot;;\n  text: string;\n}\n\ninterface ToggleTodo {\n  type: &quot;TOGGLE_TODO&quot;;\n  index: number;\n}\n</code></pre><p>As in the previous example, a Redux action can now be modelled as the union of all actions our application supports:</p><pre><code>type ReduxAction = AddTodo | ToggleTodo;\n</code></pre><p>In this case, the <code>type</code> property serves as the discriminant property and follows the naming scheme common in Redux. Let&#39;s now add a reducer which works with these two actions:</p><pre><code>function todosReducer(\n  state: ReadonlyArray&lt;Todo&gt; = [],\n  action: ReduxAction\n): ReadonlyArray&lt;Todo&gt; {\n  switch (action.type) {\n    case &quot;ADD_TODO&quot;:\n      // action has type AddTodo here\n      return [...state, { text: action.text, done: false }];\n\n    case &quot;TOGGLE_TODO&quot;:\n      // action has type ToggleTodo here\n      return state.map((todo, index) =&gt; {\n        if (index !== action.index) {\n          return todo;\n        }\n\n        return {\n          text: todo.text,\n          done: !todo.done\n        };\n      });\n\n    default:\n      return state;\n  }\n}\n</code></pre><p>Again, only the function signature contains type annotations. The remainder of the code is plain ES2015 and in no way specific to TypeScript.</p><p>We&#39;re following the same logic as in the previous example here. Based on the <code>type</code> property of the Redux action, we compute the new state without modifying the existing one. Within the cases of the <code>switch</code> statements, we can access the <code>text</code> and and <code>index</code> properties specific to each action type without any type assertions.</p><p>本篇文章是 <a href="https://mariusschulz.com/blog/series/typescript-evolution" target="_blank" rel="noopener noreferrer">TypeScript Evolution</a> 系列中的一篇。</p>',32);a.render=function(n,o,a,r,d,s){return e(),t("div",null,[i])};export default a;export{o as __pageData};
