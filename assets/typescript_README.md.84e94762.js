import{o as e,c as t,a as i}from"./app.808b26de.js";const r='{"title":"TypeScript Evolution 系列文章","description":"","frontmatter":{},"relativePath":"typescript/README.md","lastUpdated":1641020578280}',l={},o=i('<h1 id="typescript-evolution-系列文章"><a class="header-anchor" href="#typescript-evolution-系列文章" aria-hidden="true">#</a> <a href="https://mariusschulz.com/blog/series/typescript-evolution" target="_blank" rel="noopener noreferrer">TypeScript Evolution</a> 系列文章</h1><p>by Marius Schulz</p><ol><li><a href="./non-nullable-types-in-typescript.html">非空类型(Non-Nullable Types)</a>：TypeScript 2.0 增加了 <code>--strictNullChecks</code> flag，支持将 <code>null</code> 和 <code>undefined</code> 作为单独类型处理。</li><li><a href="./control-flow-based-type-analysis-in-typescript.html">基于控制流的类型分析(Control Flow Based Type Analysis)</a>：TypeScript 2.0 新增特性。联合类型变量在经过 <code>if</code> 判断后，类型范围会变小。</li><li><a href="./acquiring-type-declaration-files-in-typescript.html">获取类型声明文件(Acquiring Type Declaration Files)</a>：TypeScript 2.0 后，如果项目中用到了 Lodash 库，想得到类型支持，从 npm 直接安装 <code>@types/lodash</code> 声明包即可。</li><li><a href="./read-only-properties-in-typescript.html">只读属性(Read-Only Properties)</a>：TypeScript 2.0 为类型系统增加了一个 <code>readonly</code> 修饰符，用于声明不能被修改的属性。</li></ol>',3);l.render=function(i,r,l,a,p,c){return e(),t("div",null,[o])};export default l;export{r as __pageData};
