import{o as n,c as s,a}from"./app.808b26de.js";const e='{"title":"","description":"","frontmatter":{},"headers":[{"level":2,"title":"使用标记联合类型构建支付方法","slug":"使用标记联合类型构建支付方法"},{"level":2,"title":"使用标记联合类型构建 Redux Actions","slug":"使用标记联合类型构建-redux-actions"}],"relativePath":"typescript/tagged-union-types-in-typescript.md","lastUpdated":1640927260144}',t={},p=a('<h1 id="typescript-中的标记联合类型"><a class="header-anchor" href="#typescript-中的标记联合类型" aria-hidden="true">#</a> TypeScript 中的标记联合类型</h1><blockquote><p>Marius Schulz, <a href="https://mariusschulz.com/blog/tagged-union-types-in-typescript" target="_blank" rel="noopener noreferrer">“Tagged Union Types in TypeScript”</a>, November 3, 2016</p></blockquote><p>TypeScript 2.0 implements a rather useful feature: <em>tagged union types</em>, which you might know as <em>sum types</em> or <em>discriminated union types</em> from other programming languages. A tagged union type is a union type whose member types all define a discriminant property of a literal type.</p><p>Because the above definition is rather theoretical, we&#39;re going to be looking at two examples that illustrate how tagged union types would be used in practice.</p><h2 id="使用标记联合类型构建支付方法"><a class="header-anchor" href="#使用标记联合类型构建支付方法" aria-hidden="true">#</a> 使用标记联合类型构建支付方法</h2><p>Let&#39;s say we want to model the following payment methods that users of a system can choose from:</p><ul><li><strong>Cash</strong> without further information,</li><li><strong>PayPal</strong> with a given email address, or</li><li><strong>Credit card</strong> with a given card number and security code.</li></ul><p>For each of these payment methods, we can create a TypeScript interface:</p><div class="language-ts line-numbers-mode"><pre><code><span class="token keyword">interface</span> <span class="token class-name">Cash</span> <span class="token punctuation">{</span>\n  kind<span class="token operator">:</span> <span class="token string">&quot;cash&quot;</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">interface</span> <span class="token class-name">PayPal</span> <span class="token punctuation">{</span>\n  kind<span class="token operator">:</span> <span class="token string">&quot;paypal&quot;</span><span class="token punctuation">;</span>\n  email<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">interface</span> <span class="token class-name">CreditCard</span> <span class="token punctuation">{</span>\n  kind<span class="token operator">:</span> <span class="token string">&quot;credit&quot;</span><span class="token punctuation">;</span>\n  cardNumber<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n  securityCode<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p>Note that, in addition to the required information, each type has a <code>kind</code> property — the so-called <em>discriminant property</em>. It&#39;s of a <a href="/blog/string-literal-types-in-typescript.html">string literal type</a> in each case here. We&#39;ll look at the discriminant property in a minute.</p><p>Let&#39;s now also define a <code>PaymentMethod</code> type that is the union of the three types we just defined. This way, we&#39;re stating that every payment method must have exactly one of the three given <em>constituent types</em>:</p><div class="language-ts line-numbers-mode"><pre><code><span class="token keyword">type</span> <span class="token class-name">PaymentMethod</span> <span class="token operator">=</span> Cash <span class="token operator">|</span> PayPal <span class="token operator">|</span> CreditCard<span class="token punctuation">;</span>\n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br></div></div><p>Now that our types are in place, let&#39;s write a function that accepts a payment method and returns a human-readable description of it:</p><div class="language-ts line-numbers-mode"><pre><code><span class="token keyword">function</span> <span class="token function">describePaymentMethod</span><span class="token punctuation">(</span>method<span class="token operator">:</span> PaymentMethod<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">switch</span> <span class="token punctuation">(</span>method<span class="token punctuation">.</span>kind<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">case</span> <span class="token string">&quot;cash&quot;</span><span class="token operator">:</span>\n      <span class="token comment">// Here, method has type Cash</span>\n      <span class="token keyword">return</span> <span class="token string">&quot;Cash&quot;</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">case</span> <span class="token string">&quot;paypal&quot;</span><span class="token operator">:</span>\n      <span class="token comment">// Here, method has type PayPal</span>\n      <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">PayPal (</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>method<span class="token punctuation">.</span>email<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">)</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>\n\n    <span class="token keyword">case</span> <span class="token string">&quot;credit&quot;</span><span class="token operator">:</span>\n      <span class="token comment">// Here, method has type CreditCard</span>\n      <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Credit card (</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>method<span class="token punctuation">.</span>cardNumber<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">)</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><p>First of all, notice how few type annotations the function contains — just a single one for its <code>method</code> parameter! Besides that, the body of the function is pure ES2015 code.</p><p>Within each case of the <code>switch</code> statement, the TypeScript compiler narrows the union type to one of its member types. For instance, within the <code>&quot;paypal&quot;</code> case, the type of the <code>method</code> parameter is narrowed from <code>PaymentMethod</code> to <code>PayPal</code>. Therefore, we can access the <code>email</code> property without having to add a type assertion.</p><p>In essence, the compiler tracks the program control flow to narrow the tagged union types. Other than <code>switch</code> statements, it understands conditions as well as the effects of assignments and returns:</p><div class="language-ts line-numbers-mode"><pre><code><span class="token keyword">function</span> <span class="token function">describePaymentMethod</span><span class="token punctuation">(</span>method<span class="token operator">:</span> PaymentMethod<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>method<span class="token punctuation">.</span>kind <span class="token operator">===</span> <span class="token string">&quot;cash&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// Here, method has type Cash</span>\n    <span class="token keyword">return</span> <span class="token string">&quot;Cash&quot;</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token comment">// Here, method has type PayPal | CreditCard</span>\n\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>method<span class="token punctuation">.</span>kind <span class="token operator">===</span> <span class="token string">&quot;paypal&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// Here, method has type PayPal</span>\n    <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">PayPal (</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>method<span class="token punctuation">.</span>email<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">)</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token comment">// Here, method has type CreditCard</span>\n  <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Credit card (</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>method<span class="token punctuation">.</span>cardNumber<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">)</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><p>This degree of <a href="/blog/control-flow-based-type-analysis-in-typescript.html">control flow analysis</a> makes working with tagged union types smooth. With minimal TypeScript syntax overhead, you can write almost plain JavaScript and still benefit from type checking and code completion. A pleasant editing experience, indeed!</p><h2 id="使用标记联合类型构建-redux-actions"><a class="header-anchor" href="#使用标记联合类型构建-redux-actions" aria-hidden="true">#</a> 使用标记联合类型构建 Redux Actions</h2><p>Another use case where tagged union types shine is when you&#39;re using Redux in your TypeScript applications. Let&#39;s construct another quick example, consisting of a model, two actions, and a reducer for — you guessed it — a todo application.</p><p>Here&#39;s a simplified <code>Todo</code> type that represents a single todo. Note how we&#39;re using the <a href="/blog/read-only-properties-in-typescript.html"><code>readonly</code> modifier</a> to have the TypeScript compiler check for unintended property mutation:</p><div class="language-ts line-numbers-mode"><pre><code><span class="token keyword">interface</span> <span class="token class-name">Todo</span> <span class="token punctuation">{</span>\n  <span class="token keyword">readonly</span> text<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n  <span class="token keyword">readonly</span> done<span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>Users can add new todos and toggle the completion status of existing ones. For these requirements, we&#39;re going to need two Redux actions, which we can type as follows:</p><div class="language-ts line-numbers-mode"><pre><code><span class="token keyword">interface</span> <span class="token class-name">AddTodo</span> <span class="token punctuation">{</span>\n  <span class="token keyword">type</span><span class="token operator">:</span> <span class="token string">&quot;ADD_TODO&quot;</span><span class="token punctuation">;</span>\n  text<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">interface</span> <span class="token class-name">ToggleTodo</span> <span class="token punctuation">{</span>\n  <span class="token keyword">type</span><span class="token operator">:</span> <span class="token string">&quot;TOGGLE_TODO&quot;</span><span class="token punctuation">;</span>\n  index<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>As in the previous example, a Redux action can now be modelled as the union of all actions our application supports:</p><div class="language-ts line-numbers-mode"><pre><code><span class="token keyword">type</span> <span class="token class-name">ReduxAction</span> <span class="token operator">=</span> AddTodo <span class="token operator">|</span> ToggleTodo<span class="token punctuation">;</span>\n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br></div></div><p>In this case, the <code>type</code> property serves as the discriminant property and follows the naming scheme common in Redux. Let&#39;s now add a reducer which works with these two actions:</p><div class="language-ts line-numbers-mode"><pre><code><span class="token keyword">function</span> <span class="token function">todosReducer</span><span class="token punctuation">(</span>\n  state<span class="token operator">:</span> ReadonlyArray<span class="token operator">&lt;</span>Todo<span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n  action<span class="token operator">:</span> ReduxAction\n<span class="token punctuation">)</span><span class="token operator">:</span> ReadonlyArray<span class="token operator">&lt;</span>Todo<span class="token operator">&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">switch</span> <span class="token punctuation">(</span>action<span class="token punctuation">.</span><span class="token keyword">type</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">case</span> <span class="token string">&quot;ADD_TODO&quot;</span><span class="token operator">:</span>\n      <span class="token comment">// action has type AddTodo here</span>\n      <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token operator">...</span>state<span class="token punctuation">,</span> <span class="token punctuation">{</span> text<span class="token operator">:</span> action<span class="token punctuation">.</span>text<span class="token punctuation">,</span> done<span class="token operator">:</span> <span class="token boolean">false</span> <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">case</span> <span class="token string">&quot;TOGGLE_TODO&quot;</span><span class="token operator">:</span>\n      <span class="token comment">// action has type ToggleTodo here</span>\n      <span class="token keyword">return</span> state<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>todo<span class="token punctuation">,</span> index<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">!==</span> action<span class="token punctuation">.</span>index<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          <span class="token keyword">return</span> todo<span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n\n        <span class="token keyword">return</span> <span class="token punctuation">{</span>\n          text<span class="token operator">:</span> todo<span class="token punctuation">.</span>text<span class="token punctuation">,</span>\n          done<span class="token operator">:</span> <span class="token operator">!</span>todo<span class="token punctuation">.</span>done\n        <span class="token punctuation">}</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">default</span><span class="token operator">:</span>\n      <span class="token keyword">return</span> state<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br></div></div><p>Again, only the function signature contains type annotations. The remainder of the code is plain ES2015 and in no way specific to TypeScript.</p><p>We&#39;re following the same logic as in the previous example here. Based on the <code>type</code> property of the Redux action, we compute the new state without modifying the existing one. Within the cases of the <code>switch</code> statements, we can access the <code>text</code> and and <code>index</code> properties specific to each action type without any type assertions.</p><p>本篇文章是 <a href="https://mariusschulz.com/blog/series/typescript-evolution" target="_blank" rel="noopener noreferrer">TypeScript Evolution</a> 系列中的一篇。</p>',32);t.render=function(a,e,t,o,c,r){return n(),s("div",null,[p])};export default t;export{e as __pageData};
